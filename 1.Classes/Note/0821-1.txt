*정규표현식 (regular expression) = 정규식


1)사용자로부터 form 요소를 활용해서 어떤 값을 전달받는 경우, 특정패턴을 설정해놓고 해당 패턴의 true//false 구분 및 분류 => 유효성검사 혹은 예외조항처리. 효율적

2) 패턴

3) 정규표현식은 패턴& 플래그
-패턴 => 공통적인 규칙
-플래그 => 옵션

4) 정규표현식을 생성하는 방법은 2가지
1.직접적으로 패턴을 정의하는 방식
2. new 예약어 프로토타입 객체 => 정규표현식
-예)new RegExp()

5)정규표현식 전용 매서드
1. 정규표현식.test( 문자열) = 정의해놓은 정규표현식 해턴을 정확하게 따르고 있는지 확인하기 위한 메서드(true//false)
2. 정규표현식.exec( 문자열) = 정규표현식에 매칭되는 문자열이 있으면 해당 경과값을 배열의 자료형태로 전화 <->null 반환
3.문자열.match(정규표현식) = 해당 문자열 내 정규표현식에 매칭되는 문자열을 찾아서 바꿀문자열로 교체
4. 문자열.replace(정규표현식, 바꿀문자열) = 해당 문자열에서 정규표현식에 매칭되는 문자열을 찾아서 바꿀 문자열로 교체


6)정규표현식에서 자주사용되는 플래그 타입
-i(international)= 문자열 내 영문자를 찾아오거나 검사할 때, 대, 소문자를 구별하지 않고 검색!
-g(global) =  입력된 문자열 전역을 검색! / if, g라는 플래그가 입력되지 않는다면, 설정한 패턴을 첫번째로 검색되는 문자열만 찾아줌

7)문자클래스
-정규표현식에는 문자만 들어감. 문자의 기원/숫자의 기원하는 문자들만 찾아오고 싶을때 구분할 수 있는 방법
-숫자 클래스(digit class)
    >패턴을 정의할 때, \d :0-9까지의 숫자를 찾아올 때
    >패턴을 정의할 때, \D:숫자가 아닌 모든 문자를 찾아오고자 할때
-공백 클래스 (space class)
    >패턴을 정의할 때, \s: 문자열 가운데 공백 혹은 줄바꿈 등의 여백요소를 찾아오고자 할때
    >패턴을 정의할 때, \S: 문자열 가운데 공백이 아닌 모든 문자를 찾아오고자 할때
-단어 클래스 (word class)
    >패턴을 정의할 때, \w: 문자열에 포함되는 숫자, 언더바, 대쉬 들을 찾아오고자 할 때
    >패턴을 정의할 때, \W: 문자열에 포함되지 않는 숫자, 언더바, 대쉬 등을 찾아오고자 할 때
    >예) "ES2_0_2_4_original"
             \W:  /"ES2_0_2_4"/       \w: /"original"/

8)정규표현식에서는 시작, 끝 체크하기 위한 목적으로 생성된 기호
- ^(캐럿) = 문자열의 시작'
    > []안에서 사용될때는 반대로 작용을 함(not의 효과)
-$(달러) =문자열의 끝

9) 정규표현식, 반복패턴
-[문자열] = 특정범위를 지정
-{문자열} = 반복패턴 횟수를 지정하고자 할 때
-문자열+ = 문자열이 한번이상 반복
-문자열? = 해당 문자열이 1/0번 있는 경우 (*해당 문자열을 한번도 사용하지 않은 경우에도 true)
-문자열* = 횟수에 관계없이 1번이상 반복 (*해당 문자열이 반복되지 않고있는 경우에도 찾아옴)
-. = 어떤 문자열인지 지칭하지 않은 상태에서 그냥 문자라는 것이 존재하는지 여부를 검색 /[x.y] => xay,

10) 정규표현식, OR검색
>vertical bar => 반드시 1개만 사용! 뛰어쓰기 금지
--------------------------------------------
오늘의 궁굼한 점
유니코드 padding left? 유니코드에는 여백이 포함돼 있을 수 있으니 padding으로 위치를 정확히 잡아주자!
